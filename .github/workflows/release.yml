name: Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "npm"
          registry-url: "https://registry.npmjs.org"
          always-auth: true

      - name: Configure git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Build
        run: npm run build

      - name: Test
        run: npm test --silent

      - name: Benchmark
        run: npm run benchmark | tee benchmark-output.txt

      - name: Upload benchmark artifact
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-output
          path: benchmark-output.txt
          if-no-files-found: error

      - name: release-it (publish)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx release-it --ci

      - name: Append benchmark to GitHub release notes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const version = JSON.parse(fs.readFileSync('package.json', 'utf8')).version;
            const tag = `v${version}`;

            let bench = fs.readFileSync('benchmark-output.txt', 'utf8');
            if (bench.length > 60000) {
              bench = bench.slice(0, 60000) + '\n...truncated...';
            }

            const release = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
            const body = (release.data.body || '') + `\n\n### Benchmark\n\`\`\`\n${bench}\n\`\`\``;
            await github.rest.repos.updateRelease({ owner, repo, release_id: release.data.id, body });
